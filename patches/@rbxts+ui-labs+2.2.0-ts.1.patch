diff --git a/node_modules/@rbxts/ui-labs/src/Libraries/Signal.d.ts b/node_modules/@rbxts/ui-labs/src/Libraries/Signal.d.ts
index cc06e4b..4e6c32b 100644
--- a/node_modules/@rbxts/ui-labs/src/Libraries/Signal.d.ts
+++ b/node_modules/@rbxts/ui-labs/src/Libraries/Signal.d.ts
@@ -1,64 +1,36 @@
-//Types Borrowed from @rbxts/signal
+// Types from @rbxts/lemon-signal
 
-export interface Signal<ConnectedFunctionSignature extends (...args: any) => any = () => void, Generic extends boolean = false> {
-	/**
-	 * Fires the BindableEvent with any number of arguments
-	 * @param args The arguments to pass into the connected functions
-	 */
-	Fire(...args: Parameters<ConnectedFunctionSignature>): void;
+export declare type SignalParameters<T> = Parameters<
+	T extends unknown[] ? (...args: T) => never : T extends unknown ? (arg: T) => never : () => never
+>;
 
-	/**
-	 * Establishes a function to be called when the event fires.
-	 * Returns a `RBXScriptConnection` object associated with the connection.
-	 * @param callback The function to connect to `BindableEvent.Event`
-	 */
-	Connect<O extends Array<unknown> = Parameters<ConnectedFunctionSignature>>(
-		callback: Generic extends true
-			? Parameters<ConnectedFunctionSignature> extends Array<unknown>
-				? (...args: O) => void
-				: ConnectedFunctionSignature
-			: ConnectedFunctionSignature,
-	): RBXScriptConnection;
+export declare type SignalCallback<T> = (...args: SignalParameters<T>) => unknown;
+export declare type SignalWait<T> = T extends unknown[] ? LuaTuple<T> : T;
 
-	/**
-	 * Establishes a function to be called when the event fires.
-	 * Returns a `RBXScriptConnection` object associated with the connection.
-	 * When the event fires, the signal callback is executed in a desynchronized state.
-	 * Using `ConnectParallel` is similar to, but more efficient than, using `Connect` followed by a call to `task.desynchronize()` in the signal handler.
-	 * Note: Scripts that connect in parallel must be rooted under an Actor.
-	 * @param callback The function to connect to `BindableEvent.Event`
-	 */
-	ConnectParallel<O extends Array<unknown> = Parameters<ConnectedFunctionSignature>>(
-		callback: Generic extends true
-			? Parameters<ConnectedFunctionSignature> extends Array<unknown>
-				? (...args: O) => void
-				: ConnectedFunctionSignature
-			: ConnectedFunctionSignature,
-	): RBXScriptConnection;
+export declare class Connection<T> {
+	public readonly Connected: boolean;
 
-	/**
-	 * Establishes a function to be called when the event fires.
-	 * Returns a `RBXScriptConnection` object associated with the connection.
-	 * The behavior of `Once` is similar to `Connect`.
-	 * However, instead of allowing multiple events to be received by the specified function, only the first event will be delivered.
-	 * Using `Once` also ensures that the connection to the function will be automatically disconnected prior the function being called.
-	 * @param callback The function to connect to `BindableEvent.Event`
-	 */
-	Once<O extends Array<unknown> = Parameters<ConnectedFunctionSignature>>(
-		callback: Generic extends true
-			? Parameters<ConnectedFunctionSignature> extends Array<unknown>
-				? (...args: O) => void
-				: ConnectedFunctionSignature
-			: ConnectedFunctionSignature,
-	): RBXScriptConnection;
+	public Destroy(): void;
+	public Disconnect(): void;
+	public Reconnect(): void;
+}
+
+export declare class Signal<T = []> {
+	public readonly RBXScriptConnection?: RBXScriptConnection;
+	public readonly TotalConnections?: number;
+	public readonly OnConnectionsChanged: Signal<number>;
 
-	/**
-	 * Yields the current thread until the thread is fired.
-	 */
-	Wait(): LuaTuple<Parameters<ConnectedFunctionSignature>>;
+	public constructor(trackConnections?: boolean);
+	public static is: <O extends object>(object: O) => boolean;
+	public static wrap: <T extends Callback>(
+		signal: RBXScriptSignal<T>,
+		trackConnections?: boolean,
+	) => Signal<Parameters<T>>;
 
-	/**
-	 * Destroys the Signal
-	 */
-	Destroy(): void;
+	public Connect(fn: SignalCallback<T>): Connection<T>;
+	public Once(fn: SignalCallback<T>): Connection<T>;
+	public Wait(): SignalWait<T>;
+	public Fire(...args: SignalParameters<T>): void;
+	public DisconnectAll(): void;
+	public Destroy(): void;
 }
diff --git a/node_modules/@rbxts/ui-labs/src/Typing/Typing.d.ts b/node_modules/@rbxts/ui-labs/src/Typing/Typing.d.ts
index 7f7345f..2bf418d 100644
--- a/node_modules/@rbxts/ui-labs/src/Typing/Typing.d.ts
+++ b/node_modules/@rbxts/ui-labs/src/Typing/Typing.d.ts
@@ -19,10 +19,10 @@ interface Storybook {
 }
 
 interface InputSignals {
-	InputBegan: Signal<(input: InputObject, gameProcessed: boolean) => void>;
-	InputEnded: Signal<(input: InputObject, gameProcessed: boolean) => void>;
-	InputChanged: Signal<(input: InputObject, gameProcessed: boolean) => void>;
-	MouseMoved: Signal<(mousePos: Vector2) => void>;
+	InputBegan: Signal<[input: InputObject, gameProcessed: boolean]>;
+	InputEnded: Signal<[input: InputObject, gameProcessed: boolean]>;
+	InputChanged: Signal<[input: InputObject, gameProcessed: boolean]>;
+	MouseMoved: Signal<[mousePos: Vector2]>;
 }
 
 interface StoryBase {
